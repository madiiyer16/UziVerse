generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                @id @default(cuid())
  username       String                @unique
  email          String                @unique
  avatarUrl      String?
  bio            String?
  isVerified     Boolean               @default(false)
  role           UserRole              @default(USER)
  hashedPassword String?
  emailVerified  DateTime?
  reviewCount    Int                   @default(0)
  avgRating      Float                 @default(0)
  followersCount Int                   @default(0)
  followingCount Int                   @default(0)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  following      Follow[]              @relation("UserFollowing")
  followers      Follow[]              @relation("UserFollowers")
  playlists      Playlist[]
  ratings        Rating[]
  reviews        Review[]
  interactions   UserSongInteraction[]
  likes          UserSongLike[]

  @@index([username])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Song {
  id               String                @id @default(cuid())
  title            String
  artist           String                @default("Lil Uzi Vert")
  album            String?
  year             Int?
  spotifyId        String?               @unique
  soundcloudId     String?               @unique
  youtubeId        String?
  appleMusicId     String?
  imageUrl         String?
  previewUrl       String?
  duration         Int?
  popularity       Int?
  soundcloudPlays  Int?
  youtubeViews     Int?
  explicit         Boolean               @default(false)
  isOfficial       Boolean               @default(true)
  releaseType      ReleaseType           @default(ALBUM)
  energy           Float?
  danceability     Float?
  valence          Float?
  tempo            Float?
  acousticness     Float?
  instrumentalness Float?
  liveness         Float?
  speechiness      Float?
  loudness         Float?
  mode             Int?
  key              Int?
  timeSignature    Int?
  avgRating        Float                 @default(0)
  totalRatings     Int                   @default(0)
  totalPlays       Int                   @default(0)
  totalLikes       Int                   @default(0)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  playlistSongs    PlaylistSong[]
  ratings          Rating[]
  reviews          Review[]
  genres           SongGenre[]
  moods            SongMood[]
  tags             SongTag[]
  interactions     UserSongInteraction[]
  likes            UserSongLike[]

  @@index([title])
  @@index([artist])
  @@index([album])
  @@index([year])
  @@index([avgRating])
  @@index([totalPlays])
  @@index([createdAt])
  @@index([spotifyId])
  @@index([soundcloudId])
  @@index([isOfficial])
  @@index([releaseType])
  @@map("songs")
}

model Genre {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  color       String?
  songs       SongGenre[]

  @@index([slug])
  @@map("genres")
}

model Mood {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?
  songs       SongMood[]

  @@index([slug])
  @@map("moods")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  slug  String    @unique
  songs SongTag[]

  @@index([slug])
  @@map("tags")
}

model SongGenre {
  songId  String
  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  song    Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([songId, genreId])
  @@map("song_genres")
}

model SongMood {
  songId String
  moodId String
  mood   Mood   @relation(fields: [moodId], references: [id], onDelete: Cascade)
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([songId, moodId])
  @@map("song_moods")
}

model SongTag {
  songId String
  tagId  String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([songId, tagId])
  @@map("song_tags")
}

model Review {
  id           String   @id @default(cuid())
  userId       String
  songId       String
  reviewText   String
  helpfulCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  song         Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([songId])
  @@index([userId])
  @@index([createdAt])
  @@index([helpfulCount])
  @@map("reviews")
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([songId])
  @@index([userId])
  @@index([rating])
  @@map("ratings")
}

model UserSongInteraction {
  id         String    @id @default(cuid())
  userId     String
  songId     String
  playCount  Int       @default(0)
  lastPlayed DateTime?
  totalTime  Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  song       Song      @relation(fields: [songId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
  @@index([lastPlayed])
  @@index([playCount])
  @@map("user_song_interactions")
}

model UserSongLike {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  createdAt DateTime @default(now())
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
  @@index([createdAt])
  @@map("user_song_likes")
}

model Playlist {
  id            String         @id @default(cuid())
  name          String
  description   String?
  isPublic      Boolean        @default(false)
  userId        String
  imageUrl      String?
  songCount     Int            @default(0)
  totalDuration Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  songs         PlaylistSong[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@index([createdAt])
  @@map("playlists")
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  position   Int
  addedAt    DateTime @default(now())
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@unique([playlistId, position])
  @@index([playlistId])
  @@index([songId])
  @@map("playlist_songs")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ReleaseType {
  ALBUM
  SINGLE
  EP
  MIXTAPE
  COMPILATION
  LEAKED
  UNRELEASED
}
